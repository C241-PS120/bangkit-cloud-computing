swagger: '2.0'
info:
  description: |
    This is the Backend API of capstone project
  version: 1.0.0
  title: Backend Coptas
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: cloudrun nanti
# basePath: /v1
tags:
- name: Model
  description: Invoke the model service
- name: Article
  description: Invoke the Article service
# schemes:
# - https
securityDefinitions:
  jwt:
    type: apiKey
    name: Authorization
    in: header
    description: "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""

paths:
  /predict:
    post:
      tags:
      - Model
      summary: Predict given image
      operationId: predictImage
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: image
        in: formData
        description: image to predict
        required: false
        type: file
      responses:
        201: 
          description: Successful Predict
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Model is predicted successfully"
              data:
                $ref: "#/definitions/Prediction"
        400:
          description: Invalid input
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No Image given"
      # security:
      # - petstore_auth:
      #   - write:pets
      #   - read:pets
  
  /histories:
    get:
      tags:
      - Model
      summary: Get all histories saved on database
      description: this API return all of the histories
      operationId: getAllHistories
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Successfully get all of the Histories"
              data:
                type: array
                items:
                  $ref: "#/definitions/History"
                  
  /histories/{historiesId}:
    get:
      tags:
      - Model
      summary: Get detail of one prediction from history
      description: Returns a prediction object
      operationId: getHistories
      produces:
      - application/json
      parameters:
      - name: historiesId
        in: path
        description: ID of the history
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "History of prediction is found"
              data:
                $ref: "#/definitions/Prediction"
              
        400:
          description: Invalid ID supplied
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No ID given"
        404:
          description: History not found
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No History is found with that ID"
      # security:
      # - api_key: []
  /articles:
    get:
      tags:
      - Article
      summary: Get a list of articles
      description: Returns all articles
      operationId: getArticles
      produces:
      - application/json
      x-google-backend:
        address: ""
      parameters:
        - name: filter
          in: query
          type: string
          description: |
            Filter articles by title.
            Example: ?filter=rust
        - name: sortBy
          in: query
          type: string
          enum: [ title, date ]
          description: |
            Sort articles by title or creation date.
            Example: ?sortBy=title
        - name: sortOrder
          in: query
          type: string
          enum: [ asc, desc ]
          description: |
            Sort order: ascending (asc) or descending (desc).
            Example: ?sortOrder=asc
        - name: limit
          in: query
          type: integer
          description: |
            Limit the number of articles returned.
            Example: ?limit=10
          minimum: 1
          maximum: 50
          default: 10
        - name: offset
          in: query
          type: integer
          description: |
            Offset the number of articles returned.
            Example: ?offset=10
          minimum: 0
          default: 0
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Successfully get all of the Articles"
              data:
                type: array
                items:
                  $ref: "#/definitions/Article"
    post:
      tags:
        - Article
      summary: Create a new article
      description: Create a new article with the provided details. Authentication required.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Article object that needs to be added
          required: true
          schema:
            $ref: "#/definitions/Article"
      responses:
        201:
          description: Article created
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Article is created"
              data:
                $ref: "#/definitions/Article"
        400:
          description: Invalid input
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid input"
      security:
        - jwt: []
  /articles/{articleId}:
    get:
      tags:
      - Article
      summary: Get a specific article
      description: Returns a specific article by ID.
      operationId: getArticle
      produces:
      - application/json
      parameters:
      - name: articleId
        in: path
        description: ID of the article
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Article is found"
              data:
                $ref: "#/definitions/Article"
        400:
          description: Invalid ID supplied
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No ID given"
        404:
          description: Article not found
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No Article is found with that ID"
    put:
      tags:
        - Article
      summary: Update an existing article
      description: Update an article. Authentication required.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: articleId
          in: path
          description: ID of the article
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Updated article object
          required: true
          schema:
            $ref: "#/definitions/Article"
      responses:
        200:
          description: Article updated
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Article is updated"
              data:
                $ref: "#/definitions/Article"
        400:
          description: Invalid input
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid input"
        404:
          description: Article not found
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No Article is found with that ID"
      security:
        - jwt: []
    delete:
      tags:
        - Article
      summary: Delete an article
      description: Delete an article. Authentication required.
      parameters:
        - name: articleId
          in: path
          description: ID of the article
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: Article deleted
        400:
          description: Invalid ID supplied
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No ID given"
        404:
          description: Article not found
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "No Article is found with that ID"
      security:
        - jwt: []

definitions:
  History:
    type: object
    properties:
      id:
        type: string
        example: "lnfs792ka"
      imageUrl:
        type: string
        example: "https://storage.googleapis.com/c241-ps120-photo/lnfs792ka.jpg"
  Prediction:
    type: object
    properties:
      id:
        type: string
        example: "lnfs792ka"
      label:
        type: string
        example: "Rust"
      suggestion: 
        type: string
        example: "Hasil prediksi menunjukan kalau tanaman kopimu itu terkena Rust"
      search:
        type: string
        example: "rust"
      imageUrl:
        type: string
        example: "https://storage.googleapis.com/c241-ps120-photo/lnfs792ka.jpg"
  ApiResponse:
    type: object
    properties:
      status:
        type: string
      message:
        type: string
  Article:
    type: object
    required:
      - title
      - description
      - imageUrl
    properties:
      id:
        type: integer
        readOnly: true
        example: 1
      title:
        type: string
        example: "Rust"
      description:
        type: string
        example: "Rust is a disease that attacks the leaves of plants. Lorem ipsum dolor sit amet, consectetur adipiscing elit"
      imageUrl:
        type: string
        example: "https://storage.googleapis.com/best-waifu-ba/ichika.png"
      symptoms:
        type: array
        items:
          $ref: "#/definitions/Symptom"
        example:
          - "Symptom for Rust is yellow spots on leaves"
          - "Rust is a disease that attacks the leaves of plants"
          - "Leaves will turn yellow and fall off"

      treatment:
        type: array
        items:
          $ref: "#/definitions/Treatment"
        example:
          - "Treatment for Rust is to use fungicide"
          - "You can also use a mixture of water and soap to treat Rust"
          - "Apply the treatment every 2 weeks to prevent Rust from coming back"
      createdAt:
        type: string
        format: date-time
        readOnly: true
        example: "2024-05-26T00:00:00Z"
      updatedAt:
        type: string
        format: date-time
        readOnly: true
        example: "2024-05-26T00:00:00Z"
  Symptom:
    type: object
    required:
      - symptom
    properties:
      id:
        type: integer
        readOnly: true
        example: 1
      articleId:
        type: integer
        readOnly: true
        example: 1
      symptom:
        type: string
  Treatment:
    type: object
    required:
      - treatment
    properties:
      id:
        type: integer
        readOnly: true
        example: 1
      articleId:
        type: integer
        readOnly: true
        example: 1
      treatment:
        type: string
        example: "Treatment for Rust is to use fungicide"
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /HenneIllu/capstone-model-service/1.0.0
schemes:
 - https